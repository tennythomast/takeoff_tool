# Takeoff Tool Docker Compose Configuration
services:
  backend:
    build: 
      context: .
      dockerfile: Dockerfile
    command: >
      bash -c "python /app/backend/scripts/wait_for_db.py &&
              python /app/backend/manage.py migrate &&
              python /app/backend/manage.py collectstatic --noinput &&
              cd /app/backend && daphne -b 0.0.0.0 -p 8000 --websocket_timeout 3600 takeoff_tool.asgi:application"
    volumes:
      - .:/app
    ports:
      - "8000:8000"
      - "8001:8001" # Expose WebSocket endpoint
    dns:
      - 8.8.8.8
      - 8.8.4.4
    environment:
      - POSTGRES_NAME=takeoff
      - POSTGRES_USER=takeoff
      - POSTGRES_PASSWORD=takeoff
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - DEBUG=1
      # Updated CORS settings to include frontend container
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://127.0.0.1:3000,http://frontend:3000
      - API_HOST=0.0.0.0
      - API_PORT=8000
      # Redis settings for Django Channels
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CHANNEL_LAYERS_BACKEND=channels_redis.core.RedisChannelLayer
    env_file:
      - .env.example
      - .env
    depends_on:
      - db
      - redis
    networks:
      - takeoff-network
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; exit(0) if requests.get('http://localhost:8000/api/health/').status_code == 200 else exit(1)"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s
      
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: deps
    command: sh -c "npm install && npm run dev -- -H 0.0.0.0"
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
      - /app/.npm
    working_dir: /app
    environment:
      NODE_ENV: development
      # API URL for browser-to-backend communication
      NEXT_PUBLIC_API_URL: http://localhost:8000
      # Internal API URL for container-to-container communication
      NEXT_PUBLIC_INTERNAL_API_URL: http://backend:8000
      # WebSocket configuration
      NEXT_PUBLIC_WS_URL: ws://localhost:8000/ws/chat/
      # Enable debug logging
      NEXT_DEBUG: "1"
      # Disable Next.js telemetry
      NEXT_TELEMETRY_DISABLED: "1"
      # Enable more verbose Next.js logging
      DEBUG: "1"
      # Set HOST to 0.0.0.0 for container networking
      HOST: 0.0.0.0
      # Set PORT to 3000
      PORT: 3000
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - takeoff-network
    healthcheck:
      test: ["CMD", "node", "-e", "const http = require('http'); const options = { hostname: 'localhost', port: 3000, path: '/api/health', method: 'GET' }; const req = http.request(options, (res) => { process.exit(res.statusCode === 200 ? 0 : 1); }); req.on('error', () => { process.exit(1); }); req.end();"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=takeoff
      - POSTGRES_USER=takeoff
      - POSTGRES_PASSWORD=takeoff
    ports:
      - "5434:5432"
    networks:
      - takeoff-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U takeoff -d takeoff"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
      
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    networks:
      - takeoff-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s

networks:
  takeoff-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:  # This was missing - now added!