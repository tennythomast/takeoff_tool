# Generated by Django 4.2.23 on 2025-08-07 04:40

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BenchmarkRun',
            fields=[
                ('run_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('dataset_name', models.CharField(max_length=100)),
                ('run_timestamp', models.DateTimeField(default=django.utils.timezone.now)),
                ('total_samples', models.IntegerField(default=0)),
                ('configuration', models.JSONField(default=dict)),
                ('status', models.CharField(choices=[('running', 'Running'), ('completed', 'Completed'), ('failed', 'Failed')], default='running', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='BenchmarkSummary',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('total_cost_your_platform', models.FloatField(default=0)),
                ('total_cost_gpt4_baseline', models.FloatField(default=0)),
                ('total_cost_claude_baseline', models.FloatField(default=0)),
                ('cost_savings_vs_gpt4_percent', models.FloatField(default=0)),
                ('cost_savings_vs_claude_percent', models.FloatField(default=0)),
                ('avg_quality_retention', models.FloatField(default=0)),
                ('model_distribution', models.JSONField(default=dict)),
                ('complexity_distribution', models.JSONField(default=dict)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('benchmark_run', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='benchmark.benchmarkrun')),
            ],
        ),
        migrations.CreateModel(
            name='BenchmarkResult',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('sample_id', models.CharField(max_length=100)),
                ('input_text', models.TextField()),
                ('expected_output', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('complexity_score', models.FloatField(blank=True, null=True)),
                ('complexity_level', models.CharField(blank=True, max_length=50, null=True)),
                ('complexity_reasoning', models.JSONField(blank=True, null=True)),
                ('routing_decision', models.JSONField(blank=True, null=True)),
                ('selected_model', models.CharField(blank=True, max_length=100, null=True)),
                ('estimated_cost', models.FloatField(blank=True, null=True)),
                ('actual_response', models.TextField(blank=True, null=True)),
                ('execution_time_ms', models.IntegerField(blank=True, null=True)),
                ('gpt4_response', models.TextField(blank=True, null=True)),
                ('gpt4_cost', models.FloatField(blank=True, null=True)),
                ('claude_response', models.TextField(blank=True, null=True)),
                ('claude_cost', models.FloatField(blank=True, null=True)),
                ('semantic_similarity_vs_gpt4', models.FloatField(blank=True, null=True)),
                ('semantic_similarity_vs_claude', models.FloatField(blank=True, null=True)),
                ('quality_retained', models.BooleanField(blank=True, null=True)),
                ('quality_confidence', models.FloatField(blank=True, null=True)),
                ('benchmark_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='benchmark.benchmarkrun')),
            ],
        ),
    ]
