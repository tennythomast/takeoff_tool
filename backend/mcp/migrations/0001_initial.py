# Generated by Django 4.2.23 on 2025-07-28 04:41

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('workspaces', '0001_initial'),
        ('core', '0002_remove_membership_core_member_user_id_5b6d13_idx_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MCPResourceDiscovery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('resource_uri', models.CharField(max_length=500)),
                ('resource_name', models.CharField(max_length=200)),
                ('resource_type', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('schema', models.JSONField(default=dict, help_text='Resource data schema')),
                ('operations', models.JSONField(default=list, help_text='Supported operations on this resource')),
                ('external_id', models.CharField(help_text='External system ID (e.g., Asana project ID)', max_length=200)),
                ('discovered_at', models.DateTimeField(auto_now_add=True)),
                ('last_verified', models.DateTimeField(auto_now=True)),
                ('is_available', models.BooleanField(default=True)),
            ],
            options={
                'db_table': 'mcp_resource_discovery',
            },
        ),
        migrations.CreateModel(
            name='MCPServerConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('connection_name', models.CharField(help_text='User-friendly name for this connection', max_length=200)),
                ('description', models.TextField(blank=True)),
                ('config', models.JSONField(default=dict, help_text='Server-specific configuration')),
                ('auth_data', models.TextField(help_text='Encrypted authentication credentials')),
                ('is_active', models.BooleanField(default=True)),
                ('is_connected', models.BooleanField(default=False)),
                ('last_health_check', models.DateTimeField(blank=True, null=True)),
                ('health_status', models.CharField(choices=[('healthy', 'Healthy'), ('warning', 'Warning'), ('error', 'Error'), ('unknown', 'Unknown')], default='unknown', max_length=50)),
                ('total_requests', models.PositiveIntegerField(default=0)),
                ('failed_requests', models.PositiveIntegerField(default=0)),
                ('avg_response_time', models.DecimalField(decimal_places=3, default=0.0, max_digits=8)),
                ('total_cost', models.DecimalField(decimal_places=4, default=0.0, max_digits=10)),
                ('monthly_cost', models.DecimalField(decimal_places=4, default=0.0, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.organization')),
            ],
            options={
                'db_table': 'mcp_server_connections',
            },
        ),
        migrations.CreateModel(
            name='UserIntegrationPermission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('integration_type', models.CharField(choices=[('MCP', 'Model Control Plane'), ('JIRA', 'Jira'), ('GITHUB', 'GitHub'), ('SLACK', 'Slack'), ('ASANA', 'Asana'), ('CUSTOM', 'Custom Integration')], default='MCP', max_length=50)),
                ('permission_level', models.CharField(choices=[('READ', 'Read Only'), ('WRITE', 'Read & Write'), ('ADMIN', 'Admin')], default='READ', max_length=20)),
                ('permission_details', models.JSONField(blank=True, default=dict, help_text='Integration-specific permission details')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='integration_permissions', to='core.organization')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='integration_permissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Integration Permission',
                'verbose_name_plural': 'User Integration Permissions',
                'unique_together': {('user', 'organization', 'integration_type')},
            },
        ),
        migrations.CreateModel(
            name='MCPWorkspaceAccess',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_name', models.CharField(help_text='Friendly name for this access configuration', max_length=200)),
                ('description', models.TextField(blank=True)),
                ('resource_filters', models.JSONField(default=dict, help_text='JSON filters for resource access')),
                ('permission_level', models.CharField(choices=[('read', 'Read Only'), ('write', 'Read/Write'), ('admin', 'Full Access')], default='read', max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('auto_sync', models.BooleanField(default=True, help_text='Automatically sync new resources')),
                ('last_used', models.DateTimeField(blank=True, null=True)),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('allowed_resources', models.ManyToManyField(blank=True, help_text='Specific resources accessible to this workspace', to='mcp.mcpresourcediscovery')),
                ('connection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workspace_access', to='mcp.mcpserverconnection')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('workspace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mcp_access', to='workspaces.workspace')),
            ],
            options={
                'db_table': 'mcp_workspace_access',
            },
        ),
        migrations.CreateModel(
            name='MCPServerRegistry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qualified_name', models.CharField(max_length=200, unique=True)),
                ('display_name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('category', models.CharField(max_length=100)),
                ('icon', models.CharField(blank=True, help_text='Icon identifier or URL for the integration', max_length=255, null=True)),
                ('server_type', models.CharField(choices=[('stdio', 'Standard I/O'), ('http', 'HTTP Server'), ('websocket', 'WebSocket')], max_length=50)),
                ('install_command', models.TextField(help_text='Command to install/run the server')),
                ('config_schema', models.JSONField(default=dict, help_text='JSON schema for server configuration')),
                ('auth_schema', models.JSONField(default=dict, help_text='JSON schema for authentication')),
                ('capabilities', models.JSONField(default=list)),
                ('supported_operations', models.JSONField(default=list)),
                ('data_schema', models.JSONField(default=dict, help_text='Output data structure')),
                ('supports_workspace_scoping', models.BooleanField(default=False, help_text='Can limit access to specific workspaces/projects')),
                ('scoping_config_schema', models.JSONField(default=dict, help_text='Schema for workspace scoping configuration')),
                ('source_url', models.URLField(blank=True, help_text='Source repository URL', null=True)),
                ('documentation_url', models.URLField(blank=True, null=True)),
                ('version', models.CharField(default='latest', max_length=50)),
                ('is_verified', models.BooleanField(default=False, help_text='Verified by Dataelan team')),
                ('is_active', models.BooleanField(default=True)),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'mcp_server_registry',
                'indexes': [models.Index(fields=['category', 'is_active'], name='mcp_server__categor_1d7654_idx'), models.Index(fields=['usage_count'], name='mcp_server__usage_c_202587_idx')],
            },
        ),
        migrations.AddField(
            model_name='mcpserverconnection',
            name='server',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mcp.mcpserverregistry'),
        ),
        migrations.AddField(
            model_name='mcpserverconnection',
            name='user',
            field=models.ForeignKey(help_text='User who configured this connection', on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='MCPResourceUsage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operation', models.CharField(max_length=100)),
                ('request_data', models.JSONField(default=dict, help_text='Request parameters')),
                ('response_size', models.PositiveIntegerField(default=0, help_text='Response size in bytes')),
                ('response_time', models.DecimalField(decimal_places=3, help_text='Response time in seconds', max_digits=8)),
                ('success', models.BooleanField(default=True)),
                ('error_message', models.TextField(blank=True)),
                ('cost', models.DecimalField(decimal_places=6, default=0.0, max_digits=10)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('session_id', models.CharField(blank=True, max_length=100)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mcp.mcpresourcediscovery')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('workspace_access', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage', to='mcp.mcpworkspaceaccess')),
            ],
            options={
                'db_table': 'mcp_resource_usage',
            },
        ),
        migrations.CreateModel(
            name='MCPResourceMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('workflow_component', models.CharField(help_text='Internal component ID', max_length=200)),
                ('component_type', models.CharField(choices=[('agent', 'AI Agent'), ('workflow', 'Workflow'), ('template', 'Template'), ('tool', 'Tool')], max_length=50)),
                ('mapping_config', models.JSONField(default=dict, help_text='Configuration for how resource is used')),
                ('is_active', models.BooleanField(default=True)),
                ('last_sync', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resource', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mcp.mcpresourcediscovery')),
                ('workspace_access', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mappings', to='mcp.mcpworkspaceaccess')),
            ],
            options={
                'db_table': 'mcp_resource_mapping',
            },
        ),
        migrations.AddField(
            model_name='mcpresourcediscovery',
            name='connection',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='resources', to='mcp.mcpserverconnection'),
        ),
        migrations.AddField(
            model_name='mcpresourcediscovery',
            name='parent_resource',
            field=models.ForeignKey(blank=True, help_text='Parent resource for hierarchical access', null=True, on_delete=django.db.models.deletion.CASCADE, to='mcp.mcpresourcediscovery'),
        ),
        migrations.CreateModel(
            name='MCPPermissionScope',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('resource_pattern', models.CharField(help_text='Resource pattern for permission scope (supports wildcards)', max_length=255)),
                ('allowed_operations', models.JSONField(default=list, help_text='List of allowed operations on matching resources')),
                ('inherited_from_role', models.BooleanField(default=False, help_text='Whether this scope is inherited from organization role')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('integration_permission', models.ForeignKey(limit_choices_to={'integration_type': 'MCP'}, on_delete=django.db.models.deletion.CASCADE, related_name='mcp_scopes', to='mcp.userintegrationpermission')),
            ],
            options={
                'verbose_name': 'MCP Permission Scope',
                'verbose_name_plural': 'MCP Permission Scopes',
            },
        ),
        migrations.AddIndex(
            model_name='mcpworkspaceaccess',
            index=models.Index(fields=['workspace', 'is_active'], name='mcp_workspa_workspa_7c7c59_idx'),
        ),
        migrations.AddIndex(
            model_name='mcpworkspaceaccess',
            index=models.Index(fields=['connection', 'is_active'], name='mcp_workspa_connect_6b9035_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='mcpworkspaceaccess',
            unique_together={('workspace', 'connection', 'access_name')},
        ),
        migrations.AddIndex(
            model_name='mcpserverconnection',
            index=models.Index(fields=['organization', 'is_active'], name='mcp_server__organiz_31e1ce_idx'),
        ),
        migrations.AddIndex(
            model_name='mcpserverconnection',
            index=models.Index(fields=['user', 'is_active'], name='mcp_server__user_id_64f4a0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='mcpserverconnection',
            unique_together={('organization', 'connection_name')},
        ),
        migrations.AddIndex(
            model_name='mcpresourceusage',
            index=models.Index(fields=['workspace_access', 'timestamp'], name='mcp_resourc_workspa_a1cec6_idx'),
        ),
        migrations.AddIndex(
            model_name='mcpresourceusage',
            index=models.Index(fields=['resource', 'timestamp'], name='mcp_resourc_resourc_d3fc88_idx'),
        ),
        migrations.AddIndex(
            model_name='mcpresourceusage',
            index=models.Index(fields=['user', 'timestamp'], name='mcp_resourc_user_id_ee08d6_idx'),
        ),
        migrations.AddIndex(
            model_name='mcpresourcemapping',
            index=models.Index(fields=['workspace_access', 'component_type'], name='mcp_resourc_workspa_a7e8d0_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='mcpresourcemapping',
            unique_together={('workspace_access', 'resource', 'workflow_component')},
        ),
        migrations.AddIndex(
            model_name='mcpresourcediscovery',
            index=models.Index(fields=['connection', 'resource_type'], name='mcp_resourc_connect_ef2a0b_idx'),
        ),
        migrations.AddIndex(
            model_name='mcpresourcediscovery',
            index=models.Index(fields=['external_id'], name='mcp_resourc_externa_72c4fa_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='mcpresourcediscovery',
            unique_together={('connection', 'resource_uri')},
        ),
    ]
