# Generated by Django 4.2.23 on 2025-07-03 17:56

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Designates whether this record should be treated as active. Unselect this instead of deleting.', verbose_name='active')),
                ('deactivated_at', models.DateTimeField(blank=True, null=True, verbose_name='deactivated at')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('org_type', models.CharField(choices=[('SOLO', 'Solo User'), ('TEAM', 'Team'), ('ENTERPRISE', 'Enterprise')], db_index=True, default='SOLO', max_length=20)),
                ('api_key_strategy', models.CharField(choices=[('DATAELAN', 'Use Dataelan API Keys'), ('BYOK', 'Bring Your Own Keys'), ('HYBRID', 'Mixed Strategy')], default='DATAELAN', help_text='Strategy for managing API keys across LLM providers', max_length=20)),
                ('monthly_ai_budget', models.DecimalField(blank=True, decimal_places=2, help_text='Monthly AI spending budget in USD', max_digits=10, null=True)),
                ('ai_usage_alerts', models.BooleanField(default=True, help_text='Send alerts when approaching budget limits')),
                ('default_cache_enabled', models.BooleanField(default=True, help_text='Enable response caching by default for all agents in this organization')),
                ('default_cache_ttl_hours', models.PositiveIntegerField(default=24, help_text='Default time-to-live for cached responses in hours')),
                ('default_optimization_strategy', models.CharField(choices=[('cost_first', 'Cost First'), ('balanced', 'Balanced'), ('quality_first', 'Quality First'), ('performance_first', 'Performance First')], default='balanced', max_length=20)),
            ],
            options={
                'verbose_name': 'organization',
                'verbose_name_plural': 'organizations',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['is_active', 'created_at'], name='core_organi_is_acti_262f0b_idx'), models.Index(fields=['is_active', 'name'], name='core_organi_is_acti_93ba2b_idx'), models.Index(fields=['is_active', 'slug'], name='core_organi_is_acti_e845e2_idx')],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Designates whether this record should be treated as active. Unselect this instead of deleting.', verbose_name='active')),
                ('deactivated_at', models.DateTimeField(blank=True, null=True, verbose_name='deactivated at')),
                ('email', models.EmailField(db_index=True, error_messages={'unique': 'A user with that email already exists.'}, max_length=254, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(db_index=True, default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_verified', models.BooleanField(db_index=True, default=False, help_text='Designates whether this user has verified their email address.', verbose_name='verified')),
                ('last_login_ip', models.GenericIPAddressField(blank=True, help_text='The IP address of the last successful login.', null=True, verbose_name='last login IP')),
                ('default_org', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default_users', to='core.organization', verbose_name='default organization')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('role', models.CharField(choices=[('OWNER', 'Owner'), ('ADMIN', 'Admin'), ('MEMBER', 'Member')], db_index=True, default='MEMBER', max_length=20)),
                ('organization', models.ForeignKey(limit_choices_to={'is_active': True}, on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to='core.organization')),
                ('user', models.ForeignKey(limit_choices_to={'is_active': True}, on_delete=django.db.models.deletion.CASCADE, related_name='memberships', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'membership',
                'verbose_name_plural': 'memberships',
                'indexes': [models.Index(fields=['user', 'organization'], name='core_member_user_id_5b6d13_idx'), models.Index(fields=['organization', 'role'], name='core_member_organiz_984d18_idx'), models.Index(fields=['created_at'], name='core_member_created_03661a_idx')],
                'unique_together': {('user', 'organization')},
            },
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active', 'email'], name='core_user_is_acti_e1c6a0_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['is_active', 'created_at'], name='core_user_is_acti_fc453c_idx'),
        ),
    ]
