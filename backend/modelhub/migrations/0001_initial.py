# Generated by Django 4.2.23 on 2025-07-28 04:42

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import encrypted_model_fields.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('prompt', '__first__'),
        ('core', '0002_remove_membership_core_member_user_id_5b6d13_idx_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Model',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('name', models.CharField(max_length=255)),
                ('version', models.CharField(blank=True, max_length=50)),
                ('model_type', models.CharField(choices=[('TEXT', 'Text'), ('CODE', 'Code'), ('IMAGE', 'Image'), ('VOICE', 'Voice'), ('VIDEO', 'Video')], max_length=20)),
                ('capabilities', models.JSONField(default=list)),
                ('config', models.JSONField(blank=True, default=dict)),
                ('cost_input', models.DecimalField(decimal_places=6, help_text='Cost per 1K input tokens in USD', max_digits=10)),
                ('cost_output', models.DecimalField(decimal_places=6, help_text='Cost per 1K output tokens in USD', max_digits=10)),
                ('context_window', models.IntegerField(help_text='Maximum context length in tokens')),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('DEPRECATED', 'Deprecated')], default='ACTIVE', max_length=20)),
            ],
            options={
                'ordering': ['provider', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Provider',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', models.SlugField(unique=True)),
                ('description', models.TextField(blank=True)),
                ('website', models.URLField(blank=True)),
                ('documentation_url', models.URLField(blank=True)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('INACTIVE', 'Inactive'), ('DEPRECATED', 'Deprecated')], default='ACTIVE', max_length=20)),
                ('config', models.JSONField(blank=True, default=dict)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='RoutingRule',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('priority', models.IntegerField(help_text='1 is highest priority', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('is_active', models.BooleanField(default=True)),
                ('model_type', models.CharField(choices=[('TEXT', 'Text'), ('CODE', 'Code'), ('IMAGE', 'Image'), ('VOICE', 'Voice'), ('VIDEO', 'Video')], max_length=20)),
                ('conditions', models.JSONField(help_text='Conditions that must be met to use this rule')),
            ],
            options={
                'ordering': ['priority'],
            },
        ),
        migrations.CreateModel(
            name='RoutingRuleModel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('weight', models.IntegerField(default=1, help_text='Relative weight for random selection', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('notes', models.TextField(blank=True, help_text='Optional notes about why this model was chosen for this rule')),
                ('tags', models.JSONField(blank=True, default=list, help_text='List of tags for filtering and organizing model choices')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='modelhub.model')),
                ('rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='modelhub.routingrule')),
            ],
            options={
                'unique_together': {('rule', 'model')},
            },
        ),
        migrations.AddField(
            model_name='routingrule',
            name='models',
            field=models.ManyToManyField(help_text='Models to use when conditions are met', through='modelhub.RoutingRuleModel', to='modelhub.model'),
        ),
        migrations.AddField(
            model_name='routingrule',
            name='organization',
            field=models.ForeignKey(blank=True, help_text='If null, this is a system-wide rule', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.organization'),
        ),
        migrations.AddField(
            model_name='model',
            name='provider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='modelhub.provider'),
        ),
        migrations.CreateModel(
            name='APIKey',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('label', models.CharField(max_length=255)),
                ('key', encrypted_model_fields.fields.EncryptedCharField()),
                ('is_default', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('daily_quota', models.DecimalField(blank=True, decimal_places=2, help_text='Daily spending limit in USD', max_digits=10, null=True)),
                ('monthly_quota', models.DecimalField(blank=True, decimal_places=2, help_text='Monthly spending limit in USD', max_digits=10, null=True)),
                ('last_used_at', models.DateTimeField(blank=True, help_text='Timestamp of last successful API call', null=True)),
                ('organization', models.ForeignKey(blank=True, help_text='If null, this is a system-wide API key', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.organization')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='modelhub.provider')),
            ],
        ),
        migrations.CreateModel(
            name='ModelMetrics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('latency_ms', models.IntegerField(help_text='Response time in milliseconds')),
                ('tokens_input', models.IntegerField()),
                ('tokens_output', models.IntegerField()),
                ('cost', models.DecimalField(decimal_places=6, max_digits=10)),
                ('status', models.CharField(choices=[('SUCCESS', 'Success'), ('ERROR', 'Error'), ('TIMEOUT', 'Timeout')], max_length=20)),
                ('error_type', models.CharField(blank=True, max_length=255)),
                ('error_message', models.TextField(blank=True)),
                ('optimization_metadata', models.JSONField(blank=True, default=dict, help_text='Metadata about cost optimization decisions')),
                ('api_key', models.ForeignKey(blank=True, help_text='API key used for this request', null=True, on_delete=django.db.models.deletion.CASCADE, to='modelhub.apikey')),
                ('model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='modelhub.model')),
                ('organization', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='core.organization')),
                ('session', models.ForeignKey(blank=True, help_text='Prompt session associated with this metric', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='metrics', to='prompt.promptsession')),
            ],
            options={
                'indexes': [models.Index(fields=['model', 'timestamp'], name='modelhub_mo_model_i_b73c25_idx'), models.Index(fields=['organization', 'timestamp'], name='modelhub_mo_organiz_819f18_idx')],
            },
        ),
        migrations.AlterUniqueTogether(
            name='model',
            unique_together={('provider', 'name', 'version')},
        ),
        migrations.AddConstraint(
            model_name='apikey',
            constraint=models.UniqueConstraint(condition=models.Q(('organization__isnull', True)), fields=('provider', 'label'), name='unique_system_apikey'),
        ),
        migrations.AlterUniqueTogether(
            name='apikey',
            unique_together={('organization', 'provider', 'label')},
        ),
    ]
