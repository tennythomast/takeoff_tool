# Generated by Django 4.2.23 on 2025-07-28 04:41

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('modelhub', '__first__'),
        ('prompt', '__first__'),
        ('core', '0002_remove_membership_core_member_user_id_5b6d13_idx_and_more'),
        ('workspaces', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Designates whether this record should be treated as active. Unselect this instead of deleting.', verbose_name='active')),
                ('deactivated_at', models.DateTimeField(blank=True, null=True, verbose_name='deactivated at')),
                ('name', models.CharField(db_index=True, max_length=255, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('instructions', models.TextField(help_text='System instructions for the agent', verbose_name='instructions')),
                ('category', models.CharField(choices=[('PRODUCTIVITY', 'Productivity'), ('ANALYSIS', 'Analysis'), ('COMPLIANCE', 'Compliance'), ('RESEARCH', 'Research'), ('CUSTOMER_SERVICE', 'Customer Service'), ('DEVELOPMENT', 'Development'), ('GENERAL', 'General')], db_index=True, default='GENERAL', max_length=50)),
                ('status', models.CharField(choices=[('DRAFT', 'Draft'), ('ACTIVE', 'Active'), ('PAUSED', 'Paused'), ('ARCHIVED', 'Archived')], db_index=True, default='DRAFT', max_length=20)),
                ('icon', models.CharField(default='bot', help_text='Icon identifier', max_length=50)),
                ('is_public', models.BooleanField(default=False, help_text='Whether this agent can be cloned by other users')),
                ('is_template', models.BooleanField(default=False, help_text='Whether this agent serves as a template for new agents')),
                ('config', models.JSONField(blank=True, default=dict, help_text='Additional configuration options')),
                ('primary_role', models.CharField(choices=[('ANALYZER', 'Analyzer'), ('ASSISTANT', 'Assistant'), ('CLASSIFIER', 'Classifier'), ('GENERATOR', 'Generator'), ('MONITOR', 'Monitor'), ('CUSTOM', 'Custom')], default='ASSISTANT', help_text='Primary role for AI-generated instructions', max_length=50)),
                ('target_users', models.JSONField(blank=True, default=list, help_text='Target user types for this agent (e.g., ["workspace Managers", "Developers"])')),
                ('problem_statement', models.TextField(blank=True, help_text='Specific problem this agent solves - used for instruction generation')),
                ('communication_style', models.CharField(choices=[('PROFESSIONAL', 'Professional'), ('FRIENDLY', 'Friendly'), ('TECHNICAL', 'Technical'), ('CONCISE', 'Concise')], default='PROFESSIONAL', help_text='Communication style for responses', max_length=20)),
                ('output_format', models.CharField(choices=[('STRUCTURED_SUMMARY', 'Structured Summary'), ('BULLET_POINTS', 'Bullet Points'), ('DETAILED_REPORT', 'Detailed Report'), ('JSON_FORMAT', 'JSON Format'), ('MARKDOWN', 'Markdown Document')], default='STRUCTURED_SUMMARY', help_text='Preferred output format', max_length=30)),
                ('quality_preference', models.IntegerField(default=2, help_text='Quality vs Speed preference: 1=Fast, 2=Balanced, 3=Quality', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(3)])),
                ('predicted_accuracy', models.FloatField(blank=True, help_text='AI-predicted accuracy percentage', null=True)),
                ('predicted_response_time', models.FloatField(blank=True, help_text='AI-predicted average response time in seconds', null=True)),
                ('predicted_cost_per_1k', models.DecimalField(blank=True, decimal_places=6, help_text='AI-predicted cost per 1000 executions', max_digits=10, null=True)),
                ('capabilities', models.JSONField(blank=True, default=dict, help_text='Specific capabilities this agent has (e.g., code generation, data analysis)')),
                ('capability_level', models.CharField(choices=[('BASIC', 'Basic'), ('INTERMEDIATE', 'Intermediate'), ('ADVANCED', 'Advanced'), ('EXPERT', 'Expert')], default='BASIC', help_text='Overall capability level of this agent', max_length=20)),
                ('memory_type', models.CharField(choices=[('NONE', 'No Memory'), ('SHORT_TERM', 'Short-term Memory'), ('LONG_TERM', 'Long-term Memory'), ('HYBRID', 'Hybrid Memory')], default='SHORT_TERM', help_text='Type of memory this agent uses', max_length=20)),
                ('memory_window', models.IntegerField(default=10, help_text='Number of previous interactions to remember (0-100)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('memory_config', models.JSONField(blank=True, default=dict, help_text='Additional memory configuration options')),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Metadata about agent usage and performance')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_agents', to=settings.AUTH_USER_MODEL, verbose_name='creator')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='agents', to='core.organization', verbose_name='organization')),
                ('parent_agent', models.ForeignKey(blank=True, help_text='Original agent this was cloned from', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='derived_agents', to='agents.agent')),
                ('prompt_session', models.ForeignKey(blank=True, help_text='Associated prompt session for this agent', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='agents', to='prompt.promptsession')),
                ('routing_rule', models.ForeignKey(blank=True, help_text='LLM routing rule to determine which model to use', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='agents', to='modelhub.routingrule')),
                ('workspace', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='agents', to='workspaces.workspace', verbose_name='workspace')),
            ],
            options={
                'verbose_name': 'agent',
                'verbose_name_plural': 'agents',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AgentExecution',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('RUNNING', 'Running'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed'), ('CANCELLED', 'Cancelled')], default='PENDING', max_length=20)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('execution_time', models.FloatField(blank=True, help_text='Execution time in seconds', null=True)),
                ('input_data', models.JSONField(blank=True, default=dict, help_text='Input data for this execution')),
                ('output_data', models.JSONField(blank=True, default=dict, help_text='Output data from this execution')),
                ('error_message', models.TextField(blank=True)),
                ('tokens_used', models.IntegerField(default=0)),
                ('cost', models.DecimalField(decimal_places=6, default=0, help_text='Cost of this execution in USD', max_digits=10)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='executions', to='agents.agent', verbose_name='agent')),
                ('model_used', models.ForeignKey(blank=True, help_text='The LLM model used for this execution', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='agent_executions', to='modelhub.model')),
                ('prompt_session', models.ForeignKey(blank=True, help_text='Associated prompt session for this execution', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='agent_executions', to='prompt.promptsession')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='agent_executions', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'verbose_name': 'agent execution',
                'verbose_name_plural': 'agent executions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AgentTool',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('tool_type', models.CharField(choices=[('API', 'API'), ('WEBHOOK', 'Webhook'), ('DATABASE', 'Database'), ('FILE', 'File'), ('FUNCTION', 'Function'), ('OTHER', 'Other')], default='FUNCTION', max_length=50, verbose_name='tool type')),
                ('config', models.JSONField(blank=True, default=dict, verbose_name='configuration')),
                ('is_required', models.BooleanField(default=False, verbose_name='required')),
                ('webhook_url', models.URLField(blank=True, help_text='URL to call when executing this tool', null=True, verbose_name='webhook URL')),
                ('webhook_method', models.CharField(blank=True, choices=[('GET', 'GET'), ('POST', 'POST'), ('PUT', 'PUT'), ('PATCH', 'PATCH'), ('DELETE', 'DELETE')], default='POST', max_length=10, null=True, verbose_name='webhook method')),
                ('webhook_headers', models.JSONField(blank=True, default=dict, help_text='Headers to send with webhook request', verbose_name='webhook headers')),
                ('webhook_auth_type', models.CharField(blank=True, choices=[('NONE', 'None'), ('BASIC', 'Basic Auth'), ('BEARER', 'Bearer Token'), ('API_KEY', 'API Key'), ('CUSTOM', 'Custom')], default='NONE', max_length=20, verbose_name='webhook authentication type')),
                ('webhook_auth_config', models.JSONField(blank=True, default=dict, help_text='Authentication configuration for webhook', verbose_name='webhook authentication config')),
                ('input_schema', models.JSONField(blank=True, default=dict, help_text='JSON Schema for tool input validation', verbose_name='input schema')),
                ('output_schema', models.JSONField(blank=True, default=dict, help_text='JSON Schema for tool output validation', verbose_name='output schema')),
                ('match_percentage', models.IntegerField(default=0, help_text='AI-calculated match percentage for agent use case', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('performance_impact', models.CharField(choices=[('HIGH', 'High Impact'), ('MEDIUM', 'Medium Impact'), ('LOW', 'Low Impact')], default='MEDIUM', help_text='Expected performance impact', max_length=20)),
                ('recommendation_reason', models.TextField(blank=True, help_text='AI-generated reason for recommending this tool')),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tools', to='agents.agent', verbose_name='agent')),
            ],
            options={
                'verbose_name': 'agent tool',
                'verbose_name_plural': 'agent tools',
                'unique_together': {('agent', 'name')},
            },
        ),
        migrations.CreateModel(
            name='AgentToolExecution',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('RUNNING', 'Running'), ('COMPLETED', 'Completed'), ('FAILED', 'Failed')], default='PENDING', max_length=20)),
                ('input_data', models.JSONField(blank=True, default=dict)),
                ('output_data', models.JSONField(blank=True, default=dict)),
                ('error_message', models.TextField(blank=True)),
                ('execution_time', models.FloatField(blank=True, help_text='Execution time in seconds', null=True)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Additional metadata about this tool execution')),
                ('agent_execution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tool_executions', to='agents.agentexecution', verbose_name='agent execution')),
                ('tool', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='executions', to='agents.agenttool', verbose_name='tool')),
            ],
            options={
                'verbose_name': 'agent tool execution',
                'verbose_name_plural': 'agent tool executions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AgentOptimization',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('suggestion_type', models.CharField(choices=[('TOOL_ADDITION', 'Add Tool'), ('MODEL_ROUTING', 'Improve Routing'), ('PROMPT_OPTIMIZATION', 'Optimize Prompt'), ('CACHING', 'Enable Caching')], max_length=50)),
                ('suggestion_text', models.TextField()),
                ('estimated_impact', models.CharField(max_length=100)),
                ('applied', models.BooleanField(default=False)),
                ('applied_at', models.DateTimeField(blank=True, null=True)),
                ('actual_impact', models.TextField(blank=True)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='optimizations', to='agents.agent')),
            ],
            options={
                'verbose_name': 'agent optimization',
                'verbose_name_plural': 'agent optimizations',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AgentConfigurationStep',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('step_1_completed', models.BooleanField(default=False)),
                ('step_2_completed', models.BooleanField(default=False)),
                ('step_3_completed', models.BooleanField(default=False)),
                ('step_4_completed', models.BooleanField(default=False)),
                ('wizard_completed', models.BooleanField(default=False)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('agent', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='config_progress', to='agents.agent')),
            ],
            options={
                'verbose_name': 'agent configuration step',
                'verbose_name_plural': 'agent configuration steps',
            },
        ),
        migrations.CreateModel(
            name='AgentCacheAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_requests', models.IntegerField(default=0)),
                ('cache_hits', models.IntegerField(default=0)),
                ('cache_misses', models.IntegerField(default=0)),
                ('total_cost_saved', models.DecimalField(decimal_places=4, default=0, max_digits=10)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('agent', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='cache_analytics', to='agents.agent')),
            ],
            options={
                'verbose_name': 'agent cache analytics',
                'verbose_name_plural': 'agent cache analytics',
            },
        ),
        migrations.CreateModel(
            name='AgentResponseCache',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('input_hash', models.CharField(db_index=True, max_length=64)),
                ('response_data', models.JSONField()),
                ('cost_saved', models.DecimalField(decimal_places=4, max_digits=8)),
                ('hit_count', models.IntegerField(default=1)),
                ('expires_at', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='response_cache', to='agents.agent')),
            ],
            options={
                'indexes': [models.Index(fields=['agent', 'input_hash'], name='agents_agen_agent_i_f2b5f9_idx'), models.Index(fields=['expires_at'], name='agents_agen_expires_072359_idx')],
                'unique_together': {('agent', 'input_hash')},
            },
        ),
        migrations.CreateModel(
            name='AgentParameter',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('description', models.TextField(verbose_name='description')),
                ('parameter_type', models.CharField(choices=[('STRING', 'String'), ('NUMBER', 'Number'), ('BOOLEAN', 'Boolean'), ('ENUM', 'Enumeration'), ('JSON', 'JSON')], default='STRING', max_length=20)),
                ('default_value', models.JSONField(blank=True, help_text='Default value for this parameter', null=True)),
                ('is_required', models.BooleanField(default=False, help_text='Whether this parameter is required')),
                ('options', models.JSONField(blank=True, default=list, help_text='Available options for ENUM type parameters')),
                ('validation', models.JSONField(blank=True, default=dict, help_text='Validation rules for this parameter')),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parameters', to='agents.agent', verbose_name='agent')),
            ],
            options={
                'verbose_name': 'agent parameter',
                'verbose_name_plural': 'agent parameters',
                'ordering': ['name'],
                'unique_together': {('agent', 'name')},
            },
        ),
        migrations.AddIndex(
            model_name='agentexecution',
            index=models.Index(fields=['status'], name='agents_agen_status_fc4569_idx'),
        ),
        migrations.AddIndex(
            model_name='agentexecution',
            index=models.Index(fields=['started_at'], name='agents_agen_started_6cdf12_idx'),
        ),
        migrations.AddIndex(
            model_name='agentexecution',
            index=models.Index(fields=['completed_at'], name='agents_agen_complet_026d48_idx'),
        ),
        migrations.AddIndex(
            model_name='agent',
            index=models.Index(fields=['status'], name='agents_agen_status_4212bf_idx'),
        ),
        migrations.AddIndex(
            model_name='agent',
            index=models.Index(fields=['category'], name='agents_agen_categor_e6d69f_idx'),
        ),
        migrations.AddIndex(
            model_name='agent',
            index=models.Index(fields=['is_public'], name='agents_agen_is_publ_bfe635_idx'),
        ),
        migrations.AddIndex(
            model_name='agent',
            index=models.Index(fields=['is_template'], name='agents_agen_is_temp_78a7c4_idx'),
        ),
    ]
