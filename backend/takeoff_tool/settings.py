"""
Django settings for takeoff_tool project.

Generated by 'django-admin startproject' using Django 4.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta
from decimal import Decimal

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-0kj$e7jk7@8s3pkn5v2eux*9f%g0uftkf&l6@l5(3c71w^4_ku'

# MCP encryption key for secure storage of authentication credentials
# In production, this should be set via environment variables
# Fernet key must be 32 url-safe base64-encoded bytes
import base64
import os

# Generate a valid Fernet key if not provided in environment
def generate_fernet_key():
    return base64.urlsafe_b64encode(os.urandom(32)).decode()

MCP_ENCRYPTION_KEY = os.environ.get('MCP_ENCRYPTION_KEY', generate_fernet_key())

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# Get log level from environment or default to INFO
LOG_LEVEL = os.environ.get('DJANGO_LOG_LEVEL', 'INFO')

ALLOWED_HOSTS = ['*']

# CSRF settings for development
CSRF_TRUSTED_ORIGINS = ['http://localhost:8000', 'http://127.0.0.1:53573', 'http://127.0.0.1:*', 'http://localhost:3000']

# Security settings - for development only
# In production, set these to True and configure proper origins
SECURE_SSL_REDIRECT = False
SESSION_COOKIE_SECURE = False
CSRF_COOKIE_SECURE = False
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_CACHE_ALIAS = 'default'

# Enable Django's built-in APPEND_SLASH for better URL handling
APPEND_SLASH = True

# CORS settings - very permissive for development/testing
CORS_ALLOW_ALL_ORIGINS = True
CORS_ORIGIN_ALLOW_ALL = True  # Legacy setting for django-cors-headers < 4.0

# Django default apps
DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# Third-party apps
THIRD_PARTY_APPS = [
    'rest_framework',
    'corsheaders',
    'rest_framework_simplejwt',  # For JWT authentication
    'drf_spectacular',  # For OpenAPI schema generation
    'channels',  # For WebSocket support
    'django_celery_results',  # For storing Celery task results
    'django_filters',  # For advanced filtering in DRF
]

# Local apps
LOCAL_APPS = [
    'core.apps.CoreConfig',
    'workspaces.apps.WorkspacesConfig',
    'prompt.apps.PromptConfig',
    'modelhub.apps.ModelhubConfig',  # Model provider management
    'agents.apps.AgentsConfig',  # Agent management
    'context_manager.apps.ContextManagerConfig', # Context manager management
    'mcp.apps.MCPConfig',  # Model Control Plane management
    'file_storage.apps.FileStorageConfig', # File storage management
    'benchmark.apps.BenchmarkConfig',  # Benchmark app for platform evaluation
    'rag_service.apps.RagServiceConfig',  # RAG service management
]

# Combine all apps
INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    # CORS middleware must come before any response middleware
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    # Whitenoise middleware for serving static files
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'takeoff_tool.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            # Include app templates directory
            os.path.join(BASE_DIR, 'model_tester/templates'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'dataelan.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_NAME', 'dataelan'),
        'USER': os.environ.get('POSTGRES_USER', 'dataelan'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD', 'dataelan'),
        'HOST': os.environ.get('POSTGRES_HOST', 'localhost'),
        'PORT': os.environ.get('POSTGRES_PORT', '5434'),  # Docker mapped port
        'ATOMIC_REQUESTS': True,  # Wrap each request in a transaction
        'CONN_MAX_AGE': 60,  # Keep connections alive for 60 seconds
        'OPTIONS': {
            'connect_timeout': 10,
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Additional locations of static files
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),
]

# WhiteNoise configuration for serving static files
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Enable WhiteNoise to serve static files efficiently
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = True

# Media files (user uploads)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Temporary file storage
TEMP_STORAGE_URL = '/temp-storage/'
TEMP_STORAGE_ROOT = os.path.join(BASE_DIR, 'file_storage', 'temp_storage')

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# REST Framework settings
# Spectacular settings for API documentation
# Field encryption settings
FIELD_ENCRYPTION_KEY = '6udKSc52nEeYfgt-xVnm8N5d59D0lCsniUDuzjOJMC0='

SPECTACULAR_SETTINGS = {
    'TITLE': 'Dataelan API',
    'DESCRIPTION': 'API for Dataelan - AI-native execution platform',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
    'TAGS': [
        {'name': 'auth', 'description': 'Authentication endpoints'},
        {'name': 'projects', 'description': 'Project management'},
        {'name': 'prompts', 'description': 'AI prompt and execution management'},
        # Consider adding tags for 'modelhub' here as well if they have dedicated API endpoints
    ],
    'CONTACT': {
        'name': 'Dataelan Support',
        'email': 'support@dataelan.com',
    },
    'LICENSE': {
        'name': 'Proprietary',
    },
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayOperationId': True,
    },
}

RAG_SETTINGS = {
    # Embedding Service
    'EMBEDDING': {
        'DEFAULT_STRATEGY': 'balanced',  # cost_optimized, balanced, premium
        'CACHE_TTL': 3600,  # 1 hour
        'MAX_BATCH_SIZE': 100,
        'FALLBACK_ENABLED': True,
    },
    
    # Retrieval Service
    'RETRIEVAL': {
        'DEFAULT_TOP_K': 5,
        'SIMILARITY_THRESHOLD': 0.7,
        'MAX_CONTEXT_LENGTH': 8000,
        'INDEX_UPDATE_BATCH_SIZE': 1000,
    },
    
    # Document Processing
    'DOCUMENTS': {
        'MAX_FILE_SIZE_MB': 50,
        'SUPPORTED_TYPES': [
            'text/plain', 'application/pdf', 
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'text/html', 'text/markdown', 'text/csv'
        ],
        'DEFAULT_CHUNK_SIZE': 1000,
        'DEFAULT_OVERLAP': 200,
        'PROCESSING_TIMEOUT': 300,
    },
    
    # Cost Optimization
    'COST': {
        'DEFAULT_BUDGET_PER_QUERY': Decimal('0.10'),
        'TRACK_SAVINGS': True,
        'ESCALATION_THRESHOLD': Decimal('0.05'),
    }
}

# Celery for async processing
CELERY_BROKER_URL = os.getenv('REDIS_URL', 'redis://localhost:6379/0')
CELERY_RESULT_BACKEND = os.getenv('REDIS_URL', 'redis://localhost:6379/0')


REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 50,
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ),
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.AcceptHeaderVersioning',
    'DEFAULT_VERSION': '1.0',
    'ALLOWED_VERSIONS': ['1.0'],
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
    ),
    'DEFAULT_THROTTLE_CLASSES': [
        'core.throttling.UserTierRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'user': '100/minute',  # Default rate, will be overridden by UserTierRateThrottle
    },
    #'EXCEPTION_HANDLER': 'core.utils.custom_exception_handler',
}

# CORS settings - permissive for development/testing but properly formatted
# Allow credentials (cookies, authorization headers)
CORS_ALLOW_CREDENTIALS = True

# Specify allowed origins
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://frontend:3000",
    "http://localhost:8000",
    "http://127.0.0.1:8000"
]

# Allow specific methods - explicitly include PATCH
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Allow specific headers
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Expose standard headers
CORS_EXPOSE_HEADERS = [
    'content-type',
    'content-length',
    'content-disposition',
]

# JWT settings
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'AUTH_HEADER_TYPES': ('Bearer',),
    'USER_ID_FIELD': 'email',
    'USER_ID_CLAIM': 'email',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
}

# Custom user model
AUTH_USER_MODEL = 'core.User'

# Authentication backends
AUTHENTICATION_BACKENDS = [
    'core.backends.EmailBackend',  # Custom email-based authentication
    'django.contrib.auth.backends.ModelBackend',  # Default authentication
]

# Channels configuration
ASGI_APPLICATION = 'dataelan.asgi.application'

# Get Redis host and port from environment variables or use defaults
REDIS_HOST = os.environ.get('REDIS_HOST', 'redis') 
REDIS_PORT = os.environ.get('REDIS_PORT', '6379')
REDIS_URL = f'redis://{REDIS_HOST}:{REDIS_PORT}'

# Configure channel layers to use Redis in production or InMemory for development
CHANNEL_LAYERS_BACKEND = os.environ.get('CHANNEL_LAYERS_BACKEND', 'channels_redis.core.RedisChannelLayer')

if CHANNEL_LAYERS_BACKEND == 'channels_redis.core.RedisChannelLayer':
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels_redis.core.RedisChannelLayer',
            'CONFIG': {
                'hosts': [(REDIS_HOST, int(REDIS_PORT))],
                'expiry': 60,  # Session expiry in seconds
                'capacity': 1000,  # Maximum number of messages
            },
        },
    }
else:
    # Fallback to in-memory channel layer for development
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels.layers.InMemoryChannelLayer',
        },
    }

# Logging Configuration
from .logging_config import configure_logging

# Configure logging
LOGGING_CONFIG = None  # Disable Django's default logging configuration
configure_logging()  # Apply our custom logging configuration
