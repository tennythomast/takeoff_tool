# Generated by Django 4.2.25 on 2025-10-21 04:50

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('context_manager', '0001_initial'),
        ('modelhub', '0003_model_cost_image_model_vision_max_image_size_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('file_storage', '0002_filefolder_fileupload_parent_folder_and_more'),
        ('core', '0002_remove_membership_core_member_user_id_5b6d13_idx_and_more'),
        ('workspaces', '0002_workspace_is_system_workspace_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Chunk',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('content', models.TextField(help_text='Human-readable content representation')),
                ('chunk_index', models.IntegerField(help_text='Order within document')),
                ('chunk_type', models.CharField(choices=[('table', 'Table - Atomic'), ('metadata', 'Document Metadata - Atomic'), ('text', 'Text Content - Variable Size'), ('visual_element_group', 'Visual Element Group - Spatial'), ('drawing_metadata', 'Drawing Metadata - Atomic')], default='text', max_length=50)),
                ('embedding_model', models.CharField(max_length=100)),
                ('embedding_vector_id', models.CharField(db_index=True, help_text='ID of the vector in the vector store', max_length=255)),
                ('embedding_vector', models.JSONField(blank=True, help_text='Vector embedding for semantic search', null=True)),
                ('token_count', models.IntegerField(default=0)),
                ('metadata', models.JSONField(blank=True, default=dict, help_text='Structured metadata for filtering and retrieval')),
                ('page_number', models.IntegerField(blank=True, null=True)),
                ('relevance_score_avg', models.FloatField(blank=True, help_text='Average relevance score in queries', null=True)),
                ('retrieval_count', models.IntegerField(default=0, help_text='Number of times this chunk was retrieved')),
            ],
            options={
                'verbose_name': 'Chunk',
                'verbose_name_plural': 'Chunks',
                'db_table': 'rag_chunk',
                'ordering': ['document', 'chunk_index'],
            },
        ),
        migrations.CreateModel(
            name='KnowledgeBase',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Designates whether this record should be treated as active. Unselect this instead of deleting.', verbose_name='active')),
                ('deactivated_at', models.DateTimeField(blank=True, null=True, verbose_name='deactivated at')),
                ('name', models.CharField(db_index=True, max_length=255)),
                ('description', models.TextField(blank=True)),
                ('embedding_strategy', models.CharField(choices=[('basic', 'Basic Chunking'), ('semantic', 'Semantic Chunking'), ('hybrid', 'Hybrid Chunking'), ('sliding_window', 'Sliding Window'), ('custom', 'Custom Strategy')], db_index=True, default='semantic', max_length=30)),
                ('retrieval_strategy', models.CharField(choices=[('similarity', 'Similarity Search'), ('mmr', 'Maximum Marginal Relevance'), ('hybrid', 'Hybrid Search'), ('reranking', 'Retrieval with Reranking'), ('custom', 'Custom Strategy')], db_index=True, default='similarity', max_length=30)),
                ('chunk_size', models.IntegerField(default=1000)),
                ('chunk_overlap', models.IntegerField(default=200)),
                ('similarity_top_k', models.IntegerField(default=5)),
                ('mmr_diversity_bias', models.FloatField(default=0.3, validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(1.0)])),
                ('advanced_config', models.JSONField(blank=True, default=dict)),
                ('document_count', models.IntegerField(default=0)),
                ('chunk_count', models.IntegerField(default=0)),
                ('total_tokens', models.IntegerField(default=0)),
                ('total_embedding_cost', models.DecimalField(decimal_places=6, default=0, max_digits=10)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('last_queried', models.DateTimeField(blank=True, null=True)),
                ('is_public', models.BooleanField(default=False, help_text='If True, this knowledge base is available to all organization members')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_knowledge_bases', to=settings.AUTH_USER_MODEL)),
                ('embedding_model', models.ForeignKey(help_text='Embedding model used for this knowledge base', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='knowledge_bases', to='modelhub.model')),
                ('organization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='knowledge_bases', to='core.organization')),
                ('workspace', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='knowledge_bases', to='workspaces.workspace')),
            ],
            options={
                'verbose_name': 'Knowledge Base',
                'verbose_name_plural': 'Knowledge Bases',
                'db_table': 'rag_knowledge_base',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RAGQuery',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('query_text', models.TextField()),
                ('query_embedding_id', models.CharField(blank=True, help_text='ID of the query embedding in the vector store', max_length=255, null=True)),
                ('retrieval_strategy', models.CharField(max_length=30)),
                ('similarity_top_k', models.IntegerField(default=5)),
                ('mmr_diversity_bias', models.FloatField(blank=True, null=True)),
                ('reranking_enabled', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], db_index=True, default='pending', max_length=20)),
                ('error_message', models.TextField(blank=True)),
                ('latency_ms', models.IntegerField(blank=True, null=True)),
                ('embedding_latency_ms', models.IntegerField(blank=True, null=True)),
                ('retrieval_latency_ms', models.IntegerField(blank=True, null=True)),
                ('reranking_latency_ms', models.IntegerField(blank=True, null=True)),
                ('embedding_cost', models.DecimalField(decimal_places=6, default=0, max_digits=10)),
                ('reranking_cost', models.DecimalField(decimal_places=6, default=0, max_digits=10)),
                ('total_cost', models.DecimalField(decimal_places=6, default=0, max_digits=10)),
                ('has_feedback', models.BooleanField(default=False)),
                ('feedback_type', models.CharField(blank=True, choices=[('thumbs_up', 'Thumbs Up'), ('thumbs_down', 'Thumbs Down'), ('accurate', 'Accurate'), ('inaccurate', 'Inaccurate'), ('helpful', 'Helpful'), ('unhelpful', 'Unhelpful'), ('missing_context', 'Missing Context'), ('hallucination', 'Hallucination')], max_length=20, null=True)),
                ('feedback_text', models.TextField(blank=True)),
                ('session_id', models.CharField(blank=True, db_index=True, help_text='Session ID for tracking conversation context', max_length=255)),
                ('source_type', models.CharField(blank=True, help_text="Source of the query: 'chat', 'agent', 'workflow', etc.", max_length=50)),
                ('source_id', models.UUIDField(blank=True, help_text='ID of the source entity', null=True)),
                ('context_session', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rag_queries', to='context_manager.contextsession')),
                ('knowledge_base', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='queries', to='rag_service.knowledgebase')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rag_queries', to=settings.AUTH_USER_MODEL)),
                ('workspace', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rag_queries', to='workspaces.workspace')),
            ],
            options={
                'verbose_name': 'RAG Query',
                'verbose_name_plural': 'RAG Queries',
                'db_table': 'rag_query',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='RAGQueryResult',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('rank', models.IntegerField()),
                ('relevance_score', models.FloatField()),
                ('reranking_score', models.FloatField(blank=True, null=True)),
                ('is_relevant', models.BooleanField(blank=True, null=True)),
                ('feedback_notes', models.TextField(blank=True)),
                ('chunk', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='query_results', to='rag_service.chunk')),
                ('query', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='results', to='rag_service.ragquery')),
            ],
            options={
                'verbose_name': 'Query Result',
                'verbose_name_plural': 'Query Results',
                'db_table': 'rag_query_result',
                'ordering': ['query', 'rank'],
            },
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('is_active', models.BooleanField(db_index=True, default=True, help_text='Designates whether this record should be treated as active. Unselect this instead of deleting.', verbose_name='active')),
                ('deactivated_at', models.DateTimeField(blank=True, null=True, verbose_name='deactivated at')),
                ('title', models.CharField(db_index=True, max_length=255)),
                ('description', models.TextField(blank=True)),
                ('document_type', models.CharField(choices=[('text', 'Plain Text'), ('pdf', 'PDF'), ('docx', 'Word Document'), ('html', 'HTML'), ('markdown', 'Markdown'), ('csv', 'CSV'), ('json', 'JSON'), ('code', 'Code'), ('other', 'Other')], db_index=True, default='text', max_length=20)),
                ('content', models.TextField(blank=True, help_text='Document content or extracted text from file')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], db_index=True, default='pending', max_length=20)),
                ('processing_error', models.TextField(blank=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('source_url', models.URLField(blank=True)),
                ('extraction_method', models.CharField(blank=True, max_length=30)),
                ('extraction_cost_usd', models.DecimalField(decimal_places=6, default=0, max_digits=10)),
                ('extraction_quality_score', models.FloatField(default=0.0)),
                ('extraction_metadata', models.JSONField(blank=True, default=dict)),
                ('chunk_count', models.IntegerField(default=0)),
                ('token_count', models.IntegerField(default=0)),
                ('embedding_cost', models.DecimalField(decimal_places=6, default=0, max_digits=10)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('last_accessed', models.DateTimeField(blank=True, null=True)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_documents', to=settings.AUTH_USER_MODEL)),
                ('file_upload', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='rag_documents', to='file_storage.fileupload')),
                ('knowledge_base', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='rag_service.knowledgebase')),
            ],
            options={
                'verbose_name': 'Document',
                'verbose_name_plural': 'Documents',
                'db_table': 'rag_document',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddField(
            model_name='chunk',
            name='document',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chunks', to='rag_service.document'),
        ),
        migrations.AddField(
            model_name='chunk',
            name='parent_chunk',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='child_chunks', to='rag_service.chunk'),
        ),
        migrations.AddField(
            model_name='chunk',
            name='related_chunks',
            field=models.ManyToManyField(blank=True, related_name='linked_chunks', to='rag_service.chunk'),
        ),
        migrations.CreateModel(
            name='VectorIndex',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('name', models.CharField(max_length=255)),
                ('index_type', models.CharField(choices=[('qdrant', 'Qdrant'), ('pinecone', 'Pinecone'), ('weaviate', 'Weaviate'), ('milvus', 'Milvus'), ('redis', 'Redis'), ('pgvector', 'PostgreSQL pgvector'), ('custom', 'Custom Vector Store')], default='qdrant', max_length=20)),
                ('status', models.CharField(choices=[('initializing', 'Initializing'), ('active', 'Active'), ('updating', 'Updating'), ('error', 'Error'), ('rebuilding', 'Rebuilding')], db_index=True, default='initializing', max_length=20)),
                ('collection_name', models.CharField(help_text='Name of the collection in the vector database', max_length=255)),
                ('dimensions', models.IntegerField(default=1536, help_text='Dimensions of the embedding vectors')),
                ('metric', models.CharField(default='cosine', help_text='Distance metric used for similarity search (cosine, euclidean, dot)', max_length=20)),
                ('config', models.JSONField(blank=True, default=dict, help_text='Vector store specific configuration')),
                ('connection_string', models.TextField(blank=True, help_text='Connection string or endpoint URL')),
                ('api_key', models.CharField(blank=True, help_text='API key for the vector database (encrypted)', max_length=255)),
                ('vector_count', models.IntegerField(default=0)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('last_optimized', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('knowledge_base', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vector_indexes', to='rag_service.knowledgebase')),
            ],
            options={
                'verbose_name': 'Vector Index',
                'verbose_name_plural': 'Vector Indexes',
                'db_table': 'rag_vector_index',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['knowledge_base', 'status'], name='rag_vector__knowled_037165_idx'), models.Index(fields=['index_type'], name='rag_vector__index_t_e3f403_idx')],
            },
        ),
        migrations.AddConstraint(
            model_name='vectorindex',
            constraint=models.UniqueConstraint(fields=('knowledge_base', 'name'), name='unique_vector_index_per_kb'),
        ),
        migrations.AddIndex(
            model_name='ragqueryresult',
            index=models.Index(fields=['query', 'rank'], name='rag_query_r_query_i_347f6f_idx'),
        ),
        migrations.AddIndex(
            model_name='ragqueryresult',
            index=models.Index(fields=['chunk', 'relevance_score'], name='rag_query_r_chunk_i_84abe1_idx'),
        ),
        migrations.AddConstraint(
            model_name='ragqueryresult',
            constraint=models.UniqueConstraint(fields=('query', 'chunk'), name='unique_chunk_per_query'),
        ),
        migrations.AddIndex(
            model_name='ragquery',
            index=models.Index(fields=['knowledge_base', 'created_at'], name='rag_query_knowled_39e646_idx'),
        ),
        migrations.AddIndex(
            model_name='ragquery',
            index=models.Index(fields=['user', 'created_at'], name='rag_query_user_id_f9f370_idx'),
        ),
        migrations.AddIndex(
            model_name='ragquery',
            index=models.Index(fields=['workspace', 'created_at'], name='rag_query_workspa_831921_idx'),
        ),
        migrations.AddIndex(
            model_name='ragquery',
            index=models.Index(fields=['status'], name='rag_query_status_aab82c_idx'),
        ),
        migrations.AddIndex(
            model_name='ragquery',
            index=models.Index(fields=['session_id'], name='rag_query_session_7f51a0_idx'),
        ),
        migrations.AddIndex(
            model_name='ragquery',
            index=models.Index(fields=['source_type', 'source_id'], name='rag_query_source__e451c4_idx'),
        ),
        migrations.AddIndex(
            model_name='knowledgebase',
            index=models.Index(fields=['organization', 'is_active'], name='rag_knowled_organiz_a8011e_idx'),
        ),
        migrations.AddIndex(
            model_name='knowledgebase',
            index=models.Index(fields=['workspace', 'is_active'], name='rag_knowled_workspa_048e6a_idx'),
        ),
        migrations.AddIndex(
            model_name='knowledgebase',
            index=models.Index(fields=['embedding_strategy'], name='rag_knowled_embeddi_aa3794_idx'),
        ),
        migrations.AddIndex(
            model_name='knowledgebase',
            index=models.Index(fields=['retrieval_strategy'], name='rag_knowled_retriev_7bc0c7_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['knowledge_base', 'is_active'], name='rag_documen_knowled_5a965b_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['status', 'created_at'], name='rag_documen_status_93a0dc_idx'),
        ),
        migrations.AddIndex(
            model_name='document',
            index=models.Index(fields=['document_type'], name='rag_documen_documen_85ecf3_idx'),
        ),
        migrations.AddIndex(
            model_name='chunk',
            index=models.Index(fields=['document', 'chunk_index'], name='rag_chunk_documen_f18433_idx'),
        ),
        migrations.AddIndex(
            model_name='chunk',
            index=models.Index(fields=['embedding_vector_id'], name='rag_chunk_embeddi_7246cd_idx'),
        ),
        migrations.AddIndex(
            model_name='chunk',
            index=models.Index(fields=['retrieval_count'], name='rag_chunk_retriev_57ade0_idx'),
        ),
        migrations.AddConstraint(
            model_name='chunk',
            constraint=models.UniqueConstraint(fields=('document', 'chunk_index'), name='unique_chunk_per_document'),
        ),
    ]
